@{
    ViewData["Title"] = "BookRide";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>@ViewData["Title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- Fonts & Leaflet CSS -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

    <!-- SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Poppins', sans-serif;
            background: url('/images/white-dots-world-map-vector.jpg') no-repeat center center fixed;
            background-size: cover;
            color: white;
        }

        .ride-background {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 60px 20px;
        }

        .ride-container {
            background-color: rgba(0,0,0,0.75);
            padding: 30px;
            border-radius: 10px;
            max-width: 900px;
            width: 100%;
            box-shadow: 0 0 12px rgba(255,255,255,0.2);
        }

        h1 {
            color: #FFD700;
            text-align: center;
            margin-bottom: 30px;
        }

        label {
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 3px black;
            display: block;
            margin-bottom: 8px;
        }

        .input-group {
            margin-bottom: 20px;
        }

        input[type="text"], input[type="datetime-local"] {
            width: 100%;
            padding: 12px;
            font-size: 15px;
            border-radius: 6px;
            border: none;
        }

        .find-btn {
            margin-top: 5px;
            margin-bottom: 5px;
            background: #444;
            color: #FFD700;
            border: none;
            border-radius: 6px;
            padding: 7px 14px;
            cursor: pointer;
        }

            .find-btn:hover {
                background: #FFD700;
                color: #222;
            }

        .book-btn, #submitRating {
            background-color: #FFD700;
            color: black;
            font-weight: bold;
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            width: 100%;
        }

            .book-btn:hover, #submitRating:hover {
                background-color: #e6c200;
            }

        #map {
            height: 400px;
            border-radius: 10px;
            margin-top: 20px;
        }

        #status {
            margin-top: 15px;
            font-size: 18px;
        }

        #rideIdInfo {
            margin-top: 20px;
            background: #28a745;
            color: #fff;
            padding: 12px;
            border-radius: 8px;
            font-weight: bold;
            display: none;
        }

        #fareInfo {
            margin-top: 20px;
            background: #222;
            color: #FFD700;
            padding: 12px;
            border-radius: 8px;
            font-size: 18px;
            text-align: center;
            display: none;
        }

        #driverInfo {
            margin-top: 20px;
            background-color: rgba(255,255,255,0.9);
            color: black;
            padding: 15px;
            border-radius: 8px;
            display: none;
        }

        #ratingSection {
            margin-top: 25px;
            display: none;
        }

            #ratingSection textarea {
                width: 100%;
                padding: 12px;
                font-size: 14px;
                border-radius: 6px;
                border: none;
                margin: 12px 0;
                box-sizing: border-box;
            }

        #confirmModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 999;
            background: rgba(0,0,0,0.6);
            align-items: center;
            justify-content: center;
        }

            #confirmModal .modal-content {
                background: #222;
                padding: 32px 24px;
                border-radius: 12px;
                max-width: 350px;
                width: 90%;
                color: #FFD700;
                text-align: center;
                box-shadow: 0 0 20px #000;
            }

            #confirmModal button {
                font-weight: bold;
                padding: 10px 24px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
            }

        #confirmYes {
            background: #FFD700;
            color: #222;
            margin-right: 10px;
        }

        #confirmNo {
            background: #444;
            color: #FFD700;
        }
    </style>
</head>
<body>
    <div class="ride-background">
        <div class="ride-container">
            <h1>Book Your Ride</h1>

            <form id="rideForm">
                <div class="input-group">
                    <label for="pickup">Pickup Location</label>
                    <input type="text" id="pickup" placeholder="Type or click on map" required />
                    <button type="button" id="findPickup" class="find-btn">Find on Map</button>
                </div>
                <div class="input-group">
                    <label for="dropoff">Drop-off Location</label>
                    <input type="text" id="dropoff" placeholder="Type or click on map" required />
                    <button type="button" id="findDropoff" class="find-btn">Find on Map</button>
                </div>
                <div class="input-group">
                    <label for="scheduledDateTime">Schedule Ride For (optional)</label>
                    <input type="datetime-local" id="scheduledDateTime" name="scheduledDateTime" />
                </div>
                <button type="submit" class="book-btn">Book Ride</button>
            </form>

            <div id="map"></div>
            <div id="status"></div>
            <div id="rideIdInfo"></div>
            <div id="fareInfo"></div>
            <div id="driverInfo"></div>

            <div id="ratingSection">
                <h3>Rate Your Driver</h3>
                <select id="driverRating">
                    <option value="">Select stars</option>
                    <option value="1">⭐</option>
                    <option value="2">⭐⭐</option>
                    <option value="3">⭐⭐⭐</option>
                    <option value="4">⭐⭐⭐⭐</option>
                    <option value="5">⭐⭐⭐⭐⭐</option>
                </select>
                <textarea id="driverComment" placeholder="Leave a comment..." rows="3"></textarea>
                <button id="submitRating">Submit Rating & Comment</button>
            </div>
        </div>
    </div>

    <div id="confirmModal">
        <div class="modal-content">
            <h2 style="color:#FFD700; margin-bottom:18px;">Confirm Your Ride</h2>
            <div id="confirmDetails" style="color:#fff;font-size:16px;margin-bottom:18px;"></div>
            <button id="confirmYes">Confirm</button>
            <button id="confirmNo">Cancel</button>
        </div>
    </div>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Map & markers
        const map = L.map('map').setView([33.8938, 35.5018], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        let pickupMarker = null, dropoffMarker = null, driverMarker = null, routeLine = null;
        let pickupSelected = false, currentRideId = null, currentDriverId = null;
        let signalRConnection = null, animationInterval = null, driverMarkers = [];

        // Geocode / reverse-geocode
        async function geocode(address) {
            const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`, {
                headers: { 'Accept-Language': 'en' }
            });
            const data = await res.json();
            return data[0] ? { lat: +data[0].lat, lng: +data[0].lon } : null;
        }
        async function reverseGeocode(lat, lng) {
            const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`, {
                headers: { 'Accept-Language': 'en' }
            });
            const data = await res.json();
            return data.display_name || `${lat},${lng}`;
        }

        // Find pickup/dropoff by address
        document.getElementById("findPickup").addEventListener("click", async () => {
            const addr = document.getElementById("pickup").value.trim();
            if (!addr) return alert("Enter a pickup address.");
            const loc = await geocode(addr);
            if (!loc) return alert("Location not found.");
            pickupMarker?.remove();
            pickupMarker = L.marker([loc.lat, loc.lng]).addTo(map).bindPopup("Pickup").openPopup();
            map.setView([loc.lat, loc.lng], 15);
            document.getElementById("pickup").value = addr;
            pickupMarker.coords = loc;
            pickupSelected = true;
        });
        document.getElementById("findDropoff").addEventListener("click", async () => {
            const addr = document.getElementById("dropoff").value.trim();
            if (!addr) return alert("Enter a drop-off address.");
            const loc = await geocode(addr);
            if (!loc) return alert("Location not found.");
            dropoffMarker?.remove();
            dropoffMarker = L.marker([loc.lat, loc.lng]).addTo(map).bindPopup("Drop-off").openPopup();
            map.setView([loc.lat, loc.lng], 15);
            document.getElementById("dropoff").value = addr;
            dropoffMarker.coords = loc;
            pickupSelected = false;
        });

        // Show available drivers on load
        async function showAvailableDrivers() {
            driverMarkers.forEach(m => map.removeLayer(m));
            driverMarkers = [];
            const res = await fetch('/Ride/GetAvailableDrivers');
            const drivers = await res.json();
            drivers.forEach(d => {
                const m = L.marker([d.lat, d.lng], {
                    icon: L.icon({ iconUrl: '/images/car--v1.jpg', iconSize: [30,30] })
                }).addTo(map).bindPopup(`Driver: ${d.name}`);
                driverMarkers.push(m);
            });
        }
        showAvailableDrivers();

        // Click map to set pickup/dropoff
        map.on('click', async e => {
            const { lat, lng } = e.latlng;
            const addr = await reverseGeocode(lat, lng);
            if (!pickupSelected) {
                pickupMarker?.remove();
                pickupMarker = L.marker([lat, lng]).addTo(map).bindPopup("Pickup").openPopup();
                document.getElementById("pickup").value = addr;
                pickupMarker.coords = { lat, lng };
                pickupSelected = true;
            } else {
                dropoffMarker?.remove();
                dropoffMarker = L.marker([lat, lng]).addTo(map).bindPopup("Drop-off").openPopup();
                document.getElementById("dropoff").value = addr;
                dropoffMarker.coords = { lat, lng };
                pickupSelected = false;
            }
        });

        // Confirmation modal helper
        function showConfirmModal(pu, doff, fare, dist, onConfirm) {
            document.getElementById("confirmDetails").innerHTML = `
                <div style="margin-bottom:10px;">
                    <strong>Pickup:</strong><br/><span style="color:#FFD700">${pu}</span>
                </div>
                <div style="margin-bottom:10px;">
                    <strong>Drop-off:</strong><br/><span style="color:#FFD700">${doff}</span>
                </div>
                <div style="margin-bottom:10px;">
                    <strong>Estimated Fare:</strong> <span style="color:#FFD700">$${fare.toFixed(2)}</span>
                    <br/><span style="color:#aaa;font-size:13px;">(${dist.toFixed(2)} km)</span>
                </div>`;
            const modal = document.getElementById("confirmModal");
            modal.style.display = "flex";
            document.getElementById("confirmYes").onclick = () => { modal.style.display = "none"; onConfirm(); };
            document.getElementById("confirmNo").onclick  = () => { modal.style.display = "none"; };
        }

        // Handle form submit → calculate fare → show modal
        document.getElementById("rideForm").addEventListener("submit", async e => {
            e.preventDefault();
            let pu = document.getElementById("pickup").value.trim();
            let doff = document.getElementById("dropoff").value.trim();
            const scheduled = document.getElementById("scheduledDateTime").value;

            // Ensure lat,lng
            if (!/^-?\d+(\.\d+)?,-?\d+(\.\d+)?$/.test(pu)) {
                const loc = await geocode(pu);
                if (!loc) return alert("Pickup not found");
                pu = `${loc.lat},${loc.lng}`;
            }
            if (!/^-?\d+(\.\d+)?,-?\d+(\.\d+)?$/.test(doff)) {
                const loc = await geocode(doff);
                if (!loc) return alert("Drop-off not found");
                doff = `${loc.lat},${loc.lng}`;
            }

            // OSRM route/fare
            try {
                const [plat, plng] = pu.split(',').map(Number);
                const [dlat, dlng] = doff.split(',').map(Number);
                const url = `https://router.project-osrm.org/route/v1/driving/${plng},${plat};${dlng},${dlat}?overview=full&geometries=geojson`;
                const r = await fetch(url);
                const j = await r.json();
                if (!j.routes?.[0]) throw new Error();
                const distKm = j.routes[0].distance / 1000;
                const fare = 2.5 + distKm * 1.2;

                showConfirmModal(
                    document.getElementById("pickup").value,
                    document.getElementById("dropoff").value,
                    fare, distKm,
                    () => actuallyBookRide(pu, doff, scheduled)
                );
            } catch {
                alert("Could not calculate route/fare.");
            }
        });

        // Call backend to book ride
        async function actuallyBookRide(pu, doff, scheduled) {
            document.getElementById("status").innerText = "🚕 Ride Status: Requested";
            document.getElementById("rideIdInfo").style.display = "none";
            document.getElementById("fareInfo").style.display = "none";
            if (routeLine) { map.removeLayer(routeLine); routeLine = null; }

            try {
                const res = await fetch("/Ride/BookRide", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams({ pickup: pu, dropoff: doff, scheduledDateTime: scheduled })
                });
                if (!res.ok) throw new Error(await res.text() || "Booking failed");
                const js = await res.json();
                currentRideId = js.rideId;
                startSignalR(currentRideId);
                driverMarkers.forEach(m => map.removeLayer(m));
                driverMarkers = [];

                if (js.rideId) {
                    document.getElementById("rideIdInfo").innerHTML = `<strong>Your Ride ID:</strong> ${js.rideId}`;
                    document.getElementById("rideIdInfo").style.display = "block";
                }
                document.getElementById("status").innerText = js.message || "🚕 Ride Status: Requested";
            } catch (err) {
                alert("Booking failed: " + err.message);
                document.getElementById("status").innerText = "";
            }
        }

        // SignalR setup
        function startSignalR(rideId) {
            if (signalRConnection) return;
            signalRConnection = new signalR.HubConnectionBuilder()
                .withUrl("/rideHub")
                .build();

            signalRConnection.on("ReceiveRideStatus", status => {
                document.getElementById("status").innerText = `🚕 Ride Status: ${status}`;
                if (status === "InProgress") {
                    fetchDriverInfo();
                }
            });

            signalRConnection.start()
                .then(() => signalRConnection.invoke("JoinRideGroup", rideId));
        }

        // Fetch & render driver info (brand/model & plate)
        async function fetchDriverInfo() {
            if (!currentRideId) return;
            const res = await fetch(`/Ride/GetRideStatus?rideId=${currentRideId}`);
            if (!res.ok) return;
            const { driver } = await res.json();
            if (!driver) return;

            const info = document.getElementById("driverInfo");
            info.style.display = "block";

            const brand = driver.brand      || '';
            const model = driver.model      || '';
            const plate = driver.plateNumber|| driver.plate|| 'N/A';
            const vehicleDisplay = (brand || model) ? `${brand} ${model}`.trim() : 'N/A';
            const rating = driver.averageRating || driver.rating || '–';

            info.innerHTML = `
                <h3>Your Driver</h3>
                <p><strong>Name:</strong> ${driver.name}</p>
                <p><strong>Phone:</strong> ${driver.phone}</p>
                <p><strong>Vehicle Model:</strong> ${vehicleDisplay}</p>
                <p><strong>Plate Number:</strong> ${plate}</p>
                <p><strong>Average Rating:</strong> ⭐ ${rating}</p>
            `;

            currentDriverId = driver.id || driver.driverId;

            // animate driver
            const dropoffVal = document.getElementById("dropoff").value;
            let dropoffCoords = dropoffVal;
            if (!/^-?\d+(\.\d+)?,-?\d+(\.\d+)?$/.test(dropoffVal)) {
                const loc = await geocode(dropoffVal);
                if (!loc) return;
                dropoffCoords = `${loc.lat},${loc.lng}`;
            }
            const [dLat, dLng] = dropoffCoords.split(',').map(Number);
            await animateDriverToDropoff(driver.lat, driver.lng, dLat, dLng);
        }

        // Animate driver moving along path
        async function animateDriverToDropoff(startLat, startLng, endLat, endLng) {
            try {
                const url = `https://router.project-osrm.org/route/v1/driving/${startLng},${startLat};${endLng},${endLat}?overview=full&geometries=geojson`;
                const r = await fetch(url);
                const j = await r.json();
                if (!j.routes?.[0]) return;
                const path = j.routes[0].geometry.coordinates.map(c => [c[1], c[0]]);

                if (routeLine) map.removeLayer(routeLine);
                routeLine = L.polyline(path, { color: 'blue', weight: 5, opacity: 0.7 }).addTo(map);

                if (!driverMarker) {
                    driverMarker = L.marker([startLat, startLng], {
                        icon: L.icon({ iconUrl: '/images/car--v1.jpg', iconSize: [30,30] })
                    }).addTo(map);
                } else {
                    driverMarker.setLatLng([startLat, startLng]);
                }
                map.setView([startLat, startLng], 14);

                if (animationInterval) clearInterval(animationInterval);
                let i = 0;
                animationInterval = setInterval(() => {
                    if (i >= path.length) {
                        clearInterval(animationInterval);
                        document.getElementById("status").innerText = "✅ Ride Status: Completed";
                        document.getElementById("ratingSection").style.display = "block";
                        return;
                    }
                    driverMarker.setLatLng(path[i]);
                    document.getElementById("status").innerText = "🚗 Ride Status: On the way";
                    i++;
                }, 200);
            } catch {
                alert("❌ Could not load route.");
            }
        }

        // Submit rating & comment
        document.getElementById("submitRating").addEventListener("click", () => {
            const rating  = document.getElementById("driverRating").value;
            const comment = document.getElementById("driverComment").value;
            if (!rating || !currentDriverId) return alert("Please rate your driver.");

            fetch("/Ride/Rate", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: new URLSearchParams({ driverId: currentDriverId, rating, comment })
            })
            .then(() => {
                alert("Thanks for your rating!");
                document.getElementById("ratingSection").style.display = "none";
            });
        });
    </script>
</body>
</html>
