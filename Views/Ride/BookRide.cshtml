@{
    ViewData["Title"] = "BookRide";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Book a Ride</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Poppins', sans-serif;
            background: url('/images/white-dots-world-map-vector.jpg') no-repeat center center fixed;
            background-size: cover;
            color: white;
        }

        .ride-background {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 60px 20px;
        }

        .ride-container {
            background-color: rgba(0, 0, 0, 0.75);
            padding: 30px;
            border-radius: 10px;
            max-width: 900px;
            width: 100%;
            box-shadow: 0 0 12px rgba(255, 255, 255, 0.2);
        }

        h1 {
            color: #FFD700;
            text-align: center;
            margin-bottom: 30px;
        }

        label {
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 3px black;
            display: block;
            margin-bottom: 8px;
        }

        .input-group {
            margin-bottom: 20px;
        }

        input[type="text"] {
            width: 100%;
            padding: 12px;
            font-size: 15px;
            border-radius: 6px;
            border: none;
        }

        .book-btn, #submitRating {
            background-color: #FFD700;
            color: black;
            font-weight: bold;
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            width: 100%;
        }

            .book-btn:hover, #submitRating:hover {
                background-color: #e6c200;
            }

        #map {
            height: 400px;
            border-radius: 10px;
            margin-top: 20px;
        }

        #status {
            margin-top: 15px;
            font-size: 18px;
        }

        #driverInfo {
            margin-top: 20px;
            background-color: rgba(255,255,255,0.9);
            color: black;
            padding: 15px;
            border-radius: 8px;
        }

        #ratingSection {
            margin-top: 25px;
        }

            #ratingSection textarea {
                width: 100%;
                padding: 12px;
                font-size: 14px;
                border-radius: 6px;
                border: none;
                margin: 12px 0;
                box-sizing: border-box;
            }
    </style>
</head>
<body>
    <div class="ride-background">
        <div class="ride-container">
            <h1>Book Your Ride</h1>

            <form id="rideForm">
                <div class="input-group">
                    <label for="pickup">Pickup Location</label>
                    <input type="text" id="pickup" placeholder="Click on map for pickup" readonly required />
                </div>
                <div class="input-group">
                    <label for="dropoff">Drop-off Location</label>
                    <input type="text" id="dropoff" placeholder="Click on map for drop-off" readonly required />
                </div>
                <button type="submit" class="book-btn">Book Ride</button>
            </form>

            <div id="map"></div>
            <div id="status" class="ride-status"></div>
            <div id="driverInfo" style="display: none;"></div>

            <div id="ratingSection" style="display: none;">
                <h3>Rate Your Driver</h3>
                <select id="driverRating">
                    <option value="">Select stars</option>
                    <option value="1">⭐</option>
                    <option value="2">⭐⭐</option>
                    <option value="3">⭐⭐⭐</option>
                    <option value="4">⭐⭐⭐⭐</option>
                    <option value="5">⭐⭐⭐⭐⭐</option>
                </select>
                <textarea id="driverComment" placeholder="Leave a comment about your ride..." rows="3"></textarea>
                <button id="submitRating">Submit Rating & Comment</button>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        const map = L.map('map').setView([33.8938, 35.5018], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        let pickupMarker = null, dropoffMarker = null, driverMarker = null;
        let pickupSelected = false, currentDriverId = null;

        map.on('click', function(e) {
            const { lat, lng } = e.latlng;
            if (!pickupSelected) {
                pickupMarker?.remove();
                pickupMarker = L.marker([lat, lng]).addTo(map)
                                  .bindPopup("Pickup").openPopup();
        document.getElementById("pickup").value = `${lat},${lng}`;
                        pickupSelected = true;
            } else {
                dropoffMarker?.remove();
                dropoffMarker = L.marker([lat, lng]).addTo(map)
                                  .bindPopup("Drop-off").openPopup();
        document.getElementById("dropoff").value = `${lat},${lng}`;
                        pickupSelected = false;
            }
        });

        document.getElementById("rideForm").addEventListener("submit", async function(e) {
            e.preventDefault();
            const pu = document.getElementById("pickup").value;
            const doff = document.getElementById("dropoff").value;
            if (!pu || !doff) return alert("Please select both pickup and drop-off.");

            document.getElementById("status").innerText = "🚕 Ride Status: Requested";

            try {
                const res = await fetch("/Ride/BookRide", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams({ pickup: pu, dropoff: doff })
                });
                if (!res.ok) {
                    const err = await res.text();
                    throw new Error(err || "Booking failed");
                }
        const resJson = await res.json();
        const d = resJson.driver;

        if (!d) {
            throw new Error("No driver assigned. Try again later.");
        }
                        currentDriverId = d.id;

                document.getElementById("driverInfo").innerHTML =
                    `<h3>Your Driver</h3>
                    <p><strong>Name:</strong> ${d.name}</p>
                    <p><strong>Phone:</strong> ${d.phone}</p>
                    <p><strong>Vehicle:</strong> ${d.vehicle}</p>
                    <p><strong>Plate:</strong> ${d.plate}</p>
                    <p><strong>Rating:</strong> ⭐ ${d.rating}</p>`;
                document.getElementById("driverInfo").style.display = "block";

                let loc = { lat: parseFloat(pu.split(',')[0]), lng: parseFloat(pu.split(',')[1]) };
                try {
        const lr = await fetch(`/Ride/GetDriverLocation?driverId=${d.id}`);
                            const json = await lr.json();
                    if (json && typeof json.lat === 'number' && typeof json.lng === 'number') {
                        loc = json;
                    }
                } catch {
                    console.warn('Could not fetch driver location; using pickup coords');
                }

                driverMarker?.remove();
                driverMarker = L.marker([loc.lat, loc.lng], {
                    icon: L.icon({ iconUrl: '/images/car--v1.jpg', iconSize: [30,30] })
                }).addTo(map);

                const [dLat, dLng] = doff.split(',').map(parseFloat);
                await getRouteAndAnimate([loc.lng, loc.lat], [dLng, dLat]);
            } catch (err) {
                console.error(err);
                alert("Booking failed: " + err.message);
                document.getElementById("status").innerText = "";
            }
        });

        async function getRouteAndAnimate(start, end) {
            try {
        const url = `https://router.project-osrm.org/route/v1/driving/${start[0]},${start[1]};${end[0]},${end[1]}?overview=full&geometries=geojson`;
                        const r = await fetch(url);
                const j = await r.json();
                const path = j.routes[0].geometry.coordinates.map(c => [c[1], c[0]]);
                animateDriver(path);
            } catch {
                alert("❌ Could not load route.");
            }
        }

        function animateDriver(path) {
            let i = 0;
            const iv = setInterval(() => {
                if (i >= path.length) {
                    clearInterval(iv);
                    document.getElementById("status").innerText = "✅ Ride Status: Completed";
                    document.getElementById("ratingSection").style.display = "block";
                    return;
                }
                driverMarker.setLatLng(path[i]);
                document.getElementById("status").innerText = "🚗 Ride Status: On the way";
                i++;
            }, 200);
        }

        document.getElementById("submitRating").addEventListener("click", async function() {
            const rating  = document.getElementById("driverRating").value;
            const comment = document.getElementById("driverComment").value.trim();
            if (!rating || currentDriverId == null) {
                return alert("Please select a rating before submitting.");
            }
            try {
                const res = await fetch("/Ride/Rate", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams({
                        driverId: currentDriverId,
                        rating:   rating,
                        comment:  comment
                    })
                });
                if (!res.ok) throw new Error("Feedback save failed");
                alert("Thanks for your feedback!");
                document.getElementById("ratingSection").style.display = "none";
                document.getElementById("driverRating").value  = "";
                document.getElementById("driverComment").value = "";
            } catch (err) {
                console.error(err);
                alert("❌ Could not submit feedback. Please try again.");
            }
        });
    </script>

</body>
</html>