// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetInfo.Data;

#nullable disable

namespace ProjetInfo.Migrations
{
    [DbContext(typeof(RideShareDbContext))]
    [Migration("20250514134313_AddRideDateTime")]
    partial class AddRideDateTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjetInfo.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ProjetInfo.Models.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DriverID");

                    b.HasIndex("UserID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("ProjetInfo.Models.PaymentTransaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("UserID");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("ProjetInfo.Models.Ride", b =>
                {
                    b.Property<int>("RideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RideID"));

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("DropOffLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentTransactionID")
                        .HasColumnType("int");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RideDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RideID");

                    b.HasIndex("DriverID");

                    b.HasIndex("PaymentTransactionID");

                    b.HasIndex("UserID");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("ProjetInfo.Models.RideFeedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RideID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("DriverID");

                    b.HasIndex("RideID");

                    b.HasIndex("UserID");

                    b.ToTable("RideFeedbacks");
                });

            modelBuilder.Entity("ProjetInfo.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjetInfo.Models.UserPreferences", b =>
                {
                    b.Property<int>("PreferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceID"));

                    b.Property<string>("PreferredPayment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredRideType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PreferenceID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("ProjetInfo.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleID");

                    b.HasIndex("DriverID");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ProjetInfo.Models.Driver", b =>
                {
                    b.HasOne("ProjetInfo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetInfo.Models.PaymentTransaction", b =>
                {
                    b.HasOne("ProjetInfo.Models.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetInfo.Models.Ride", b =>
                {
                    b.HasOne("ProjetInfo.Models.Driver", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetInfo.Models.PaymentTransaction", "PaymentTransaction")
                        .WithMany("Rides")
                        .HasForeignKey("PaymentTransactionID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ProjetInfo.Models.User", "User")
                        .WithMany("Rides")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("PaymentTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetInfo.Models.RideFeedback", b =>
                {
                    b.HasOne("ProjetInfo.Models.Driver", "Driver")
                        .WithMany("DriverFeedbacks")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetInfo.Models.Ride", "Ride")
                        .WithMany("RideFeedbacks")
                        .HasForeignKey("RideID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjetInfo.Models.User", "User")
                        .WithMany("RideFeedbacks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetInfo.Models.UserPreferences", b =>
                {
                    b.HasOne("ProjetInfo.Models.User", "User")
                        .WithOne("UserPreferences")
                        .HasForeignKey("ProjetInfo.Models.UserPreferences", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetInfo.Models.Vehicle", b =>
                {
                    b.HasOne("ProjetInfo.Models.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("ProjetInfo.Models.Driver", b =>
                {
                    b.Navigation("DriverFeedbacks");

                    b.Navigation("Rides");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ProjetInfo.Models.PaymentTransaction", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("ProjetInfo.Models.Ride", b =>
                {
                    b.Navigation("RideFeedbacks");
                });

            modelBuilder.Entity("ProjetInfo.Models.User", b =>
                {
                    b.Navigation("PaymentTransactions");

                    b.Navigation("RideFeedbacks");

                    b.Navigation("Rides");

                    b.Navigation("UserPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
